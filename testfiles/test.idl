// vim: filetype=opendds_idl:spell

/*
 * Checking Comment: TODO should be highlighted and these words should be
 * marked as misspelled: wrog spelld worrdz.
 */

// Checking Comment: TODO should be highlighted and these words should be
// marked as misspelled: wrog spelld worrdz.

// Keyword in comment: default

#include "local.idl"

#include <dds/DdsDcps.idl>

#define MACRO "String that should not be highlighted"

#ifdef MACRO
#  define something "String that should not be highlighted"
#  include "local.idl"
#  include <dds/DdsDcps.idl>
#endif

typedef long ArrayType[10];

@annotation the_annotation {
    unsigned long value default 10;
};

const unsigned long a = 10;
const int8 b = -10;
const uint16 c = 0x10af;
const int32 d = -0X10AF;
const long e = 01234;
const double f = -102.34e+10;
const boolean g = true;
const boolean h = FALSE;
const char i = 'i';
const char j = '\n';
const char k = '\'';
const string l = "Hello World\n\t\v\b\r\f\a\\\'\"\o44\xff";
const wchar m = L'i';
const wchar n = L'\n';
const wchar o = L'\'';
const wstring p = L"Hello World\n\t\v\b\r\f\a\\\'\"\o44\xff";

const long id_with_number_4_in_it = 4;
const string string_with_spelling_mistakes = "wrog spelld worrdz";

@topic
struct the_struct {
  @default(10)
  long x;
  @key short t;
  sequence<long> anon_seq;
};

module the_module {
  const long value = 0x30;

  @some_annotation
  enum EnumType {
    x_value,
    y_value,
    z_value
  };
};

union the_union switch(long) {
case 1:
  short x;
case 2:
  long y;
case 3:
  float z;
default:
  char xyz;
}

local interface the_interface {
  the_struct get_struct(in long in_arg, inout long inout_arg, out long out_arg);
};

struct struct_with_errors {
  long trailing_space; 
	long using_tab;
   long odd_number_of_spaces_in_indent;
  int using_int;
}
